name: RunPod Pod Lifecycle

on:
  push:
    branches:
      - main

jobs:
  manage-runpod:
    runs-on: ubuntu-latest
    steps:
      - name: Start RunPod Pod
        id: start_pod
        run: |
          # Send a request to the RunPod API to start a pod.
          # The response JSON is parsed with `jq` to extract the new pod's ID.
          # This ID is then set as an output variable for later steps.
          API_RESPONSE=$(curl --request POST \
            --url https://api.runpod.io/v1/pods \
            --header 'Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}' \
            --header 'Content-Type: application/json' \
            --data '{
              "name": "My Auto-Started Pod",
              "imageName": "runpod/pytorch:2.1.0-py3.10-cuda11.8.0-devel-ubuntu22.04",
              "gpuTypeIds": ["NVIDIA GeForce RTX 4090"],
              "containerDiskInGb": 10,
              "volumeInGb": 10,
              "ports": "8888/http,22/tcp",
              "gpuCount": 1
            }')
          
          echo "API Response: $API_RESPONSE"
          POD_ID=$(echo $API_RESPONSE | jq -r '.id')
          
          if [ -z "$POD_ID" ] || [ "$POD_ID" == "null" ]; then
            echo "Failed to get POD ID from response."
            exit 1
          fi

          echo "Successfully started pod with ID: $POD_ID"
          echo "pod_id=$POD_I" >> $GITHUB_OUTPUT


      - name: Wait for 30 seconds
        run: sleep 30

      - name: Terminate RunPod Pod
        if: always()
        run: |
          echo "Terminating pod with ID: ${{ steps.start_pod.outputs.pod_id }}"
          curl --request POST \
            --url https://api.runpod.io/v1/pods/${{ steps.start_pod.outputs.pod_id }}/stop \
            --header 'Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}'
